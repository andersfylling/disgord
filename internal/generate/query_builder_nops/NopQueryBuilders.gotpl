// Code generated by generate/interfaces; DO NOT EDIT.

package disgord

{{ range $type := . }}

func ({{ $type.ShortName }} *{{ $type.Name.Name }}) copyOverTo(other interface{}) error {
    var dest *{{ $type.TypeName }}
    var valid bool
    if dest, valid = other.(*{{ $type.TypeName }}); !valid {
        return newErrorUnsupportedType("argument given is not a *{{ $type.TypeName }} type")
    }

    {{- range $i, $field := $type.Fields }}
    {{- if $field.IsSlice }}
    dest.{{ $field.Name }} = make([]{{ $field.SliceType }}, len({{ $type.ShortName }}.{{ $field.Name }}))
    {{- if $field.MustCopyEach }}
    for i := 0; i < len({{ $type.ShortName }}.{{ $field.Name }}); i++ {
        {{- if $field.EventualBuiltin }}
        *dest.{{ $field.Name }}[i] = *{{ $type.ShortName }}.{{ $field.Name }}[i]
        {{- else if $field.EventualInterface }}
        // copying a slice of interface{} has not yet been implemented
        true = false // this should not compile
        // please add this feature to internal/generate/inter/main.go
        {{- else }}
        dest.{{ $field.Name }}[i] = DeepCopy({{ $type.ShortName }}.{{ $field.Name }}[i]).({{ $field.SliceType }})
        {{- end }}
    }
    {{- else }}
    copy(dest.{{ $field.Name }}, {{ $type.ShortName }}.{{ $field.Name }})
    {{- end}}
    {{- else if $field.IsArray }}
        // array
    {{- else }}
    dest.{{ $field.Name }} = {{ $type.ShortName }}.{{ $field.Name }}
    {{- end }}
    {{- end }}

    return nil
}

{{ end }}