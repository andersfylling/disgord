package disgord

// Code generated - This file has been automatically generated by generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt events.go and event/cache.go and run go generate

import "github.com/andersfylling/disgord/json"

// Cache interface for event handling and REST methods
// commented out fields are simply not supported yet. PR's are welcome
//
// Note that on events you are expected to return a unmarshalled object. For delete methods
// you should return nil, and a nil error if the objected to be deleted was not found (nop!).
// Note that the error might change to a "CacheMiss" or something similar such that we can
//  get more metrics!
type Cache interface {
    CacheUpdater
    CacheGetter
}

type CacheGetter interface {
    // REST API

    // GetGuildAuditLogs(guildID Snowflake) *guildAuditLogsBuilder // TODO
    GetMessages(channelID Snowflake, params *GetMessages) ([]*Message, error)
    GetMessage(channelID, messageID Snowflake) (ret *Message, err error)
    //GetUsersWhoReacted(channelID, messageID Snowflake, emoji interface{}, params URLQueryStringer) (reactors []*User, err error)
    //GetPinnedMessages(channelID Snowflake) (ret []*Message, err error)
    GetChannel(id Snowflake) (ret *Channel, err error)
    //GetChannelInvites(id Snowflake) (ret []*Invite, err error)
    GetGuildEmoji(guildID, emojiID Snowflake) (*Emoji, error)
    GetGuildEmojis(id Snowflake) ([]*Emoji, error)
    GetGuild(id Snowflake) (*Guild, error)
    GetGuildChannels(id Snowflake) ([]*Channel, error)
    GetMember(guildID, userID Snowflake) (*Member, error)
    GetMembers(guildID Snowflake, params *GetMembers) ([]*Member, error)
    //GetGuildBans(id Snowflake) ([]*Ban, error)
    //GetGuildBan(guildID, userID Snowflake) (*Ban, error)
    GetGuildRoles(guildID Snowflake) ([]*Role, error)
    //GetMemberPermissions(guildID, userID Snowflake) (permissions PermissionBit, err error)
    //GetGuildVoiceRegions(id Snowflake) ([]*VoiceRegion, error)
    //GetGuildInvites(id Snowflake) ([]*Invite, error)
    //GetGuildIntegrations(id Snowflake) ([]*Integration, error)
    //GetGuildEmbed(guildID Snowflake) (*GuildEmbed, error)
    //GetGuildVanityURL(guildID Snowflake) (*PartialInvite, error)
    //GetInvite(inviteCode string, params URLQueryStringer) (*Invite, error)
    GetCurrentUser() (*User, error)
    GetUser(id Snowflake) (*User, error)
    GetCurrentUserGuilds(params *GetCurrentUserGuilds) (ret []*Guild, err error)
    //GetUserDMs() (ret []*Channel, err error)
    //GetUserConnections() (ret []*UserConnection, err error)
    //GetVoiceRegions() ([]*VoiceRegion, error)
    //GetChannelWebhooks(channelID Snowflake) (ret []*Webhook, err error)
    //GetGuildWebhooks(guildID Snowflake) (ret []*Webhook, err error)
    //GetWebhook(id Snowflake) (ret *Webhook, err error)
}

type CacheUpdater interface {
    // Gateway events
    {{- range .}}
    {{- if .IsDiscordEvent }}
    {{.}}(data []byte) (*{{.}}, error)
    {{- end}}
    {{- end}}
}

func cacheDispatcher(c Cache, event string, data []byte) (evt EventType, err error) {
    switch event {
    {{- range .}}
    {{- if .IsDiscordEvent }}
    case Evt{{.}}: evt, err = c.{{.}}(data)
    {{- end}}
    {{- end}}
    default:
        evt = nil
        err = nil
    }

    return evt, err
}

// nop cache
type CacheNop struct{}

var _ CacheUpdater = (*CacheNop)(nil)
var _ CacheGetter = (*CacheNop)(nil)
var _ Cache = (*CacheNop)(nil)

func (c *CacheNop) Patch(v interface{}) {
    if v == nil {
        return
    }
    if deficient, ok := v.(internalUpdater); ok {
        deficient.updateInternals()
    }
}

{{- range .}}
{{- if .IsDiscordEvent }}
func (c *CacheNop) {{.}}(data []byte) (evt *{{.}}, err error) {
    if err = json.Unmarshal(data, &evt); err != nil {
        return nil, err
    }
    c.Patch(evt)
    return evt, nil
}
{{- end}}
{{- end}}

// REST lookup
func (c *CacheNop) GetMessage(channelID, messageID Snowflake) (*Message, error) { return nil, CacheMissErr }
func (c *CacheNop) GetChannel(id Snowflake) (*Channel, error)                   { return nil, CacheMissErr }
func (c *CacheNop) GetGuildEmoji(guildID, emojiID Snowflake) (*Emoji, error)    { return nil, CacheMissErr }
func (c *CacheNop) GetGuildEmojis(id Snowflake) ([]*Emoji, error)               { return nil, CacheMissErr }
func (c *CacheNop) GetGuild(id Snowflake) (*Guild, error)                       { return nil, CacheMissErr }
func (c *CacheNop) GetGuildChannels(id Snowflake) ([]*Channel, error)           { return nil, CacheMissErr }
func (c *CacheNop) GetMember(guildID, userID Snowflake) (*Member, error)        { return nil, CacheMissErr }
func (c *CacheNop) GetGuildRoles(guildID Snowflake) ([]*Role, error)            { return nil, CacheMissErr }
func (c *CacheNop) GetCurrentUser() (*User, error)                              { return nil, CacheMissErr }
func (c *CacheNop) GetUser(id Snowflake) (*User, error)                         { return nil, CacheMissErr }
func (c *CacheNop) GetCurrentUserGuilds(p *GetCurrentUserGuilds) ([]*Guild, error) {
    return nil, CacheMissErr
}
func (c *CacheNop) GetMessages(channel Snowflake, p *GetMessages) ([]*Message, error) {
    return nil, CacheMissErr
}
func (c *CacheNop) GetMembers(guildID Snowflake, p *GetMembers) ([]*Member, error) {
    return nil, CacheMissErr
}